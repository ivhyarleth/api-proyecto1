AWSTemplateFormatVersion: '2010-09-09'
Description: 'api_proyecto1 en ECS'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: api-proyecto1-vpc }]

  IGW:
    Type: AWS::EC2::InternetGateway

  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRT

  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.31.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags: [{ Key: Name, Value: api-proyecto1-public-1 }]

  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.31.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags: [{ Key: Name, Value: api-proyecto1-public-2 }]

  AssocPub1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic1
      RouteTableId: !Ref PublicRT

  AssocPub2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic2
      RouteTableId: !Ref PublicRT

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP 80 público
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: api-proyecto1-cluster

  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: api-proyecto1
      ImageScanningConfiguration: { ScanOnPush: true }
      LifecyclePolicy:
        LifecyclePolicyText: |
          { "rules": [ { "rulePriority": 1, "description": "keep last 10", "selection": { "tagStatus": "any", "countType": "imageCountMoreThan", "countNumber": 10 }, "action": { "type": "expire" } } ] }

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/api-proyecto1
      RetentionInDays: 7

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: api-proyecto1
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: arn:aws:iam::478701513931:role/LabRole
      TaskRoleArn: arn:aws:iam::478701513931:role/LabRole
      ContainerDefinitions:
        - Name: web
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepo}:latest"
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: DB_PATH
              Value: /data/students.db
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: web

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: api-proyecto1-alb
      Scheme: internet-facing
      Type: application
      Subnets: [!Ref SubnetPublic1, !Ref SubnetPublic2]
      SecurityGroups: [!Ref AppSG]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: api-proyecto1-tg
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /
      Matcher: { HttpCode: "200-399" }

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions: [{ Type: forward, TargetGroupArn: !Ref TargetGroup }]

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref AppSG]
          Subnets: [!Ref SubnetPublic1, !Ref SubnetPublic2]
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: api-proyecto1-build
      ServiceRole: arn:aws:iam::478701513931:role/LabRole
      Artifacts: { Type: NO_ARTIFACTS }
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPO_NAME
            Value: !Ref ECRRepo
      Source:
        Type: GITHUB
        Location: https://github.com/ivhyarleth/api-proyecto1.git
        BuildSpec: "buildspec.yml"
      TimeoutInMinutes: 20

Outputs:
  AlbDNS:
    Description: DNS público del ALB
    Value: !GetAtt ALB.DNSName
  EcrRepoUri:
    Description: URI del repo ECR
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepo}"
  CodeBuildName:
    Description: Proyecto CodeBuild
    Value: !Ref CodeBuildProject
